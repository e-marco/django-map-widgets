class DjangoMapWidgetBase{constructor(e){Object.assign(this,e),this.coordinatesOverlayToggleBtn.addEventListener("click",this.toggleCoordinatesOverlay.bind(this)),this.coordinatesOverlayDoneBtn.addEventListener("click",this.handleCoordinatesOverlayDoneBtnClick.bind(this)),this.coordinatesOverlayInputs.forEach((e=>e.addEventListener("change",this.handleCoordinatesInputsChange.bind(this)))),this.addMarkerBtn.addEventListener("click",this.handleAddMarkerBtnClick.bind(this)),this.deleteBtn.addEventListener("click",this.resetMap.bind(this)),this.wrapElemSelector.closest(".module.collapse")&&document.addEventListener("show.fieldset",this.initializeMap.bind(this));const t=new google.maps.places.Autocomplete(this.addressAutoCompleteInput,this.GooglePlaceAutocompleteOptions);google.maps.event.addListener(t,"place_changed",this.handleAutoCompletePlaceChange.bind(this,t)),this.addressAutoCompleteInput.addEventListener("keydown",this.handleAutoCompleteInputKeyDown.bind(this)),this.geocoder=new google.maps.Geocoder,this.initializeMap()}initializeMap(){console.warn("Implement initializeMap method.")}updateMap(e,t){console.warn("Implement updateMap method.")}addMarkerToMap(e,t){console.warn("Implement this method for your map js library.")}fitBoundMarker(){console.warn("Implement this method for your map js library.")}removeMarker(){console.warn("Implement this method for your map js library.")}dragMarker(e){console.warn("Implement dragMarker method.")}handleMapClick(e){console.warn("Implement handleMapClick method.")}handleAddMarkerBtnClick(e){console.warn("Implement handleAddMarkerBtnClick method.")}isInt(e){return!isNaN(e)&&parseInt(Number(e))===e&&!isNaN(parseInt(e,10))}getLocationValues(){const e=this.locationInput.value.split(" ");return{lat:e[2].replace(/[\(\)]/g,""),lng:e[1].replace(/[\(\)]/g,"")}}callPlaceTriggerHandler(e,t,a){if(void 0===a){const a={lat:parseFloat(e),lng:parseFloat(t)};this.geocoder.geocode({location:a},((a,i)=>{if(i===google.maps.GeocoderStatus.OK){const i=a[0]||{};this.addressAutoCompleteInput.value=i.formatted_address||"",document.dispatchEvent(new CustomEvent(this.placeChangedTriggerNameSpace,{detail:[i,e,t,this.wrapElemSelector,this.locationInput]})),this.locationFieldValue&&0!==Object.keys(this.locationFieldValue).length?document.dispatchEvent(new CustomEvent(this.markerChangeTriggerNameSpace,{detail:[i,e,t,this.wrapElemSelector,this.locationInput]})):document.dispatchEvent(new CustomEvent(this.markerCreateTriggerNameSpace,{detail:[i,e,t,this.wrapElemSelector,this.locationInput]}))}}))}else document.dispatchEvent(new CustomEvent(this.placeChangedTriggerNameSpace,{detail:[a,e,t,this.wrapElemSelector,this.locationInput]}))}updateLocationInput(e,t,a){const i="POINT ("+t+" "+e+")";this.locationInput.value=i,this.updateCoordinatesInputs(e,t),this.addMarkerToMap(e,t),this.callPlaceTriggerHandler(e,t,a),this.locationFieldValue={lng:t,lat:e},this.deleteBtn.classList.remove("mw-btn-default","disabled"),this.deleteBtn.classList.add("mw-btn-danger")}resetMap(){this.locationFieldValue&&Object.keys(this.locationFieldValue).length>0&&(this.hideOverlay(),this.locationInput.value="",this.coordinatesOverlayInputs.value="",this.addressAutoCompleteInput.value="",this.addMarkerBtn.classList.remove("active"),this.removeMarker(),this.deleteBtn.classList.remove("mw-btn-danger"),this.deleteBtn.classList.add("mw-btn-default","disabled"),document.dispatchEvent(new CustomEvent(this.markerDeleteTriggerNameSpace,{detail:[this.locationFieldValue.lat,this.locationFieldValue.lng,this.wrapElemSelector,this.locationInput]})),this.locationFieldValue=null)}toggleCoordinatesOverlay(){this.coordinatesOverlayToggleBtn.classList.toggle("active"),this.wrapElemSelector.querySelector(".mw-coordinates-overlay").classList.toggle("hide")}updateCoordinatesInputs(e,t){this.wrapElemSelector.querySelector(".mw-overlay-latitude").value=Number(e).toFixed(5)||"",this.wrapElemSelector.querySelector(".mw-overlay-longitude").value=Number(t).toFixed(5)||""}handleCoordinatesInputsChange(e){const t=this.wrapElemSelector.querySelector(".mw-overlay-latitude").value,a=this.wrapElemSelector.querySelector(".mw-overlay-longitude").value;t&&a&&(this.updateLocationInput(t,a),this.fitBoundMarker())}handleCoordinatesOverlayDoneBtnClick(){this.wrapElemSelector.querySelector(".mw-coordinates-overlay").classList.add("hide"),this.coordinatesOverlayToggleBtn.classList.remove("active")}handleCurrentPosition(e){this.updateLocationInput(e.coords.latitude,e.coords.longitude),this.hideOverlay(),this.fitBoundMarker()}handlecurrentPositionError(){this.hideOverlay(),alert("Your location could not be found.")}handleAutoCompleteInputKeyDown(e){if(13===(e.keyCode||e.which))return e.preventDefault(),!1}handleAutoCompletePlaceChange(e){const t=e.getPlace();if(!t.geometry)return;const a=t.geometry.location.lat(),i=t.geometry.location.lng();this.updateLocationInput(a,i,t),this.fitBoundMarker()}showOverlay(){this.loaderOverlayElem.classList.remove("hide")}hideOverlay(){this.loaderOverlayElem.classList.add("hide")}}class DjangoMapboxPointFieldWidget extends DjangoMapWidgetBase{init(e){Object.assign(this,e),this.coordinatesOverlayToggleBtn.addEventListener("click",this.toggleCoordinatesOverlay.bind(this)),this.coordinatesOverlayDoneBtn.addEventListener("click",this.handleCoordinatesOverlayDoneBtnClick.bind(this)),this.coordinatesOverlayInputs.forEach((e=>e.addEventListener("change",this.handleCoordinatesInputsChange.bind(this)))),this.addMarkerBtn.addEventListener("click",this.handleAddMarkerBtnClick.bind(this)),this.deleteBtn.addEventListener("click",this.resetMap.bind(this)),this.wrapElemSelector.closest(".module.collapse")&&document.addEventListener("show.fieldset",this.initializeMap.bind(this)),mapboxgl.accessToken=this.mapOptions.access_token,this.mapboxSDK=new mapboxSdk({accessToken:this.mapOptions.access_token}),this.mapboxOptions=this.mapOptions.mapOptions||{},this.mapboxOptions.container=this.mapElement.id,this.geocoderOptions=this.mapOptions.geocoderOptions||{},this.geocoderOptions.mapboxgl=mapboxgl,this.geocoderOptions.accessToken=mapboxgl.accessToken,this.geocoderOptions.placeholder||(this.geocoderOptions.placeholder=this.geocoderInputPlaceholderText),this.geocoder=new MapboxGeocoder(this.geocoderOptions),this.mapboxOptions.center&&(this.mapboxOptions.center=[this.mapboxOptions.center[1],this.mapboxOptions.center[0]]),this.flyToEnabled=this.geocoderOptions.flyTo||!1,this.geocoder.on("result",(e=>this.handleAutoCompletePlaceChange(e.result))),this.initializeMap()}initializeMap(){this.map=new mapboxgl.Map(this.mapboxOptions),document.getElementById(this.geocoderWrapID).appendChild(this.geocoder.onAdd(this.map)),this.mapOptions.showZoomNavigation&&this.map.addControl(new mapboxgl.NavigationControl),this.addressAutoCompleteInput=document.querySelector(`#${this.geocoderWrapID} input:first-of-type`),this.mapElement.dataset.mapboxMapObj=this.map,this.mapElement.dataset.mapboxMapWidgetObj=this,this.locationFieldValue&&Object.keys(this.locationFieldValue).length>0&&(this.updateLocationInput(this.locationFieldValue.lat,this.locationFieldValue.lng),this.fitBoundMarker())}addMarkerToMap(e,t){this.removeMarker(),this.marker=(new mapboxgl.Marker).setLngLat([parseFloat(t),parseFloat(e)]).setDraggable(!0).addTo(this.map),this.marker.on("dragend",this.dragMarker.bind(this))}fitBoundMarker(){this.marker&&(this.flyToEnabled?this.map.flyTo({center:this.marker.getLngLat(),zoom:this.mapOptions.markerFitZoom||14}):this.map.jumpTo({center:this.marker.getLngLat(),zoom:this.mapOptions.markerFitZoom||14}))}removeMarker(){this.marker&&this.marker.remove()}dragMarker(){const e=this.marker.getLngLat();this.updateLocationInput(e.lat,e.lng)}handleAddMarkerBtnClick(){this.mapElement.classList.toggle("click"),this.addMarkerBtn.classList.toggle("active"),this.addMarkerBtn.classList.contains("active")?this.map.on("click",this.handleMapClick.bind(this)):this.map.off("click",this.handleMapClick.bind(this))}handleMapClick(e){this.map.off("click",this.handleMapClick.bind(this)),this.mapElement.classList.remove("click"),this.addMarkerBtn.classList.remove("active"),this.updateLocationInput(e.lngLat.lat,e.lngLat.lng)}callPlaceTriggerHandler(e,t,a){void 0===a?this.mapboxSDK.geocoding.reverseGeocode({query:[parseFloat(t),parseFloat(e)]}).send().then((a=>{const i=a?.body?.features?.[0];this.geocoder.clear();const o=i?.place_name||"Unknown Place";this.addressAutoCompleteInput.value=o,document.dispatchEvent(new CustomEvent(this.placeChangedTriggerNameSpace,{detail:[i,e,t,this.wrapElemSelector,this.locationInput]})),this.locationFieldValue&&0!==Object.keys(this.locationFieldValue).length?document.dispatchEvent(new CustomEvent(this.markerChangeTriggerNameSpace,{detail:[i,e,t,this.wrapElemSelector,this.locationInput]})):document.dispatchEvent(new CustomEvent(this.markerCreateTriggerNameSpace,{detail:[i,e,t,this.wrapElemSelector,this.locationInput]}))})):document.dispatchEvent(new CustomEvent(this.placeChangedTriggerNameSpace,{detail:[a,e,t,this.wrapElemSelector,this.locationInput]}))}handleAutoCompletePlaceChange(e){if(!e.geometry)return;const[t,a]=e.geometry.coordinates;this.updateLocationInput(a,t,e),this.fitBoundMarker()}}window.DjangoMapboxPointFieldWidget=DjangoMapboxPointFieldWidget;